{"ast":null,"code":"/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * This class listens to events on the document and then updates a react\n * component through callbacks.\n * Please note that captureMouseMove must be called in\n * order to initialize listeners on mousemove and mouseup.\n * releaseMouseMove must be called to remove them. It is important to\n * call releaseMouseMoves since mousemove is expensive to listen to.\n *\n * @providesModule DOMMouseMoveTracker\n * @typechecks\n */\n'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _EventListener = require('./EventListener');\n\nvar _EventListener2 = _interopRequireDefault(_EventListener);\n\nvar _cancelAnimationFramePolyfill = require('./cancelAnimationFramePolyfill');\n\nvar _cancelAnimationFramePolyfill2 = _interopRequireDefault(_cancelAnimationFramePolyfill);\n\nvar _requestAnimationFramePolyfill = require('./requestAnimationFramePolyfill');\n\nvar _requestAnimationFramePolyfill2 = _interopRequireDefault(_requestAnimationFramePolyfill);\n\nvar _FixedDataTableEventHelper = require('./FixedDataTableEventHelper');\n\nvar _FixedDataTableEventHelper2 = _interopRequireDefault(_FixedDataTableEventHelper);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar DOMMouseMoveTracker = function () {\n  /**\n   * onMove is the callback that will be called on every mouse move.\n   * onMoveEnd is called on mouse up when movement has ended.\n   */\n  function DOMMouseMoveTracker(\n  /*function*/\n  onMove,\n  /*function*/\n  onMoveEnd,\n  /*DOMElement*/\n  domNode,\n  /*boolean*/\n  touchEnabled) {\n    _classCallCheck(this, DOMMouseMoveTracker);\n\n    this._isDragging = false;\n    this._isTouchEnabled = touchEnabled;\n    this._animationFrameID = null;\n    this._domNode = domNode;\n    this._onMove = onMove;\n    this._onMoveEnd = onMoveEnd;\n    this._onMouseEnd = this._onMouseEnd.bind(this);\n    this._onMouseMove = this._onMouseMove.bind(this);\n    this._onMouseUp = this._onMouseUp.bind(this);\n    this._didMouseMove = this._didMouseMove.bind(this);\n  }\n  /**\n   * This is to set up the listeners for listening to mouse move\n   * and mouse up signaling the movement has ended. Please note that these\n   * listeners are added at the document.body level. It takes in an event\n   * in order to grab inital state.\n   */\n\n\n  _createClass(DOMMouseMoveTracker, [{\n    key: 'captureMouseMoves',\n    value: function captureMouseMoves(\n    /*object*/\n    event) {\n      if (!this._eventMoveToken && !this._eventUpToken && !this._eventLeaveToken) {\n        this._eventMoveToken = _EventListener2.default.listen(this._domNode, 'mousemove', this._onMouseMove);\n        this._eventUpToken = _EventListener2.default.listen(this._domNode, 'mouseup', this._onMouseUp);\n        this._eventLeaveToken = _EventListener2.default.listen(this._domNode, 'mouseleave', this._onMouseEnd);\n      }\n\n      if (this._isTouchEnabled && !this._eventTouchStartToken && !this._eventTouchMoveToken && !this._eventTouchEndToken) {\n        this._eventTouchStartToken = _EventListener2.default.listen(this._domNode, 'touchstart', this._onMouseMove);\n        this._eventTouchMoveToken = _EventListener2.default.listen(this._domNode, 'touchmove', this._onMouseMove);\n        this._eventTouchEndToken = _EventListener2.default.listen(this._domNode, 'touchend', this._onMouseUp);\n      }\n\n      if (!this._isDragging) {\n        this._deltaX = 0;\n        this._deltaY = 0;\n        this._isDragging = true;\n\n        var coordinates = _FixedDataTableEventHelper2.default.getCoordinatesFromEvent(event);\n\n        var x = coordinates.x;\n        var y = coordinates.y;\n        this._x = x;\n        this._y = y;\n      }\n\n      event.preventDefault();\n    }\n    /**\n     * This releases all of the listeners on document.body.\n     */\n\n  }, {\n    key: 'releaseMouseMoves',\n    value: function releaseMouseMoves() {\n      if (this._eventMoveToken && this._eventUpToken && this._eventLeaveToken) {\n        this._eventMoveToken.remove();\n\n        this._eventMoveToken = null;\n\n        this._eventUpToken.remove();\n\n        this._eventUpToken = null;\n\n        this._eventLeaveToken.remove();\n\n        this._eventLeaveToken = null;\n      }\n\n      if (this._isTouchEnabled && this._eventTouchStartToken && this._eventTouchMoveToken && this._eventTouchEndToken) {\n        this._eventTouchStartToken.remove();\n\n        this._eventTouchStartToken = null;\n\n        this._eventTouchMoveToken.remove();\n\n        this._eventTouchMoveToken = null;\n\n        this._eventTouchEndToken.remove();\n\n        this._eventTouchEndToken = null;\n      }\n\n      if (this._animationFrameID !== null) {\n        (0, _cancelAnimationFramePolyfill2.default)(this._animationFrameID);\n        this._animationFrameID = null;\n      }\n\n      if (this._isDragging) {\n        this._isDragging = false;\n        this._x = null;\n        this._y = null;\n      }\n    }\n    /**\n     * Returns whether or not if the mouse movement is being tracked.\n     */\n\n  }, {\n    key: 'isDragging',\n    value: function isDragging()\n    /*boolean*/\n    {\n      return this._isDragging;\n    }\n    /**\n     * Calls onMove passed into constructor and updates internal state.\n     */\n\n  }, {\n    key: '_onMouseMove',\n    value: function _onMouseMove(\n    /*object*/\n    event) {\n      var coordinates = _FixedDataTableEventHelper2.default.getCoordinatesFromEvent(event);\n\n      var x = coordinates.x;\n      var y = coordinates.y;\n      this._deltaX += x - this._x;\n      this._deltaY += y - this._y;\n\n      if (this._animationFrameID === null) {\n        // The mouse may move faster then the animation frame does.\n        // Use `requestAnimationFramePolyfill` to avoid over-updating.\n        this._animationFrameID = (0, _requestAnimationFramePolyfill2.default)(this._didMouseMove);\n      }\n\n      this._x = x;\n      this._y = y;\n      event.preventDefault();\n    }\n  }, {\n    key: '_didMouseMove',\n    value: function _didMouseMove() {\n      this._animationFrameID = null;\n\n      this._onMove(this._deltaX, this._deltaY);\n\n      this._deltaX = 0;\n      this._deltaY = 0;\n    }\n    /**\n     * Calls onMoveEnd passed into constructor and updates internal state.\n     */\n\n  }, {\n    key: '_onMouseUp',\n    value: function _onMouseUp() {\n      if (this._animationFrameID) {\n        this._didMouseMove();\n      }\n\n      this._onMoveEnd(false);\n    }\n    /**\n     * Calls onMoveEnd passed into the constructor, updates internal state, and cancels the move.\n     */\n\n  }, {\n    key: '_onMouseEnd',\n    value: function _onMouseEnd() {\n      this._onMoveEnd(true);\n    }\n  }]);\n\n  return DOMMouseMoveTracker;\n}();\n\nmodule.exports = DOMMouseMoveTracker;","map":null,"metadata":{},"sourceType":"script"}