{"ast":null,"code":"/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableRow\n * @typechecks\n */\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _FixedDataTableCellGroup = require('./FixedDataTableCellGroup');\n\nvar _FixedDataTableCellGroup2 = _interopRequireDefault(_FixedDataTableCellGroup);\n\nvar _Scrollbar = require('./Scrollbar');\n\nvar _Scrollbar2 = _interopRequireDefault(_Scrollbar);\n\nvar _cx = require('./cx');\n\nvar _cx2 = _interopRequireDefault(_cx);\n\nvar _joinClasses = require('./joinClasses');\n\nvar _joinClasses2 = _interopRequireDefault(_joinClasses);\n\nvar _FixedDataTableTranslateDOMPosition = require('./FixedDataTableTranslateDOMPosition');\n\nvar _FixedDataTableTranslateDOMPosition2 = _interopRequireDefault(_FixedDataTableTranslateDOMPosition);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // .fixedDataTableLayout/header border-bottom-width\n\n\nvar HEADER_BORDER_BOTTOM_WIDTH = 1;\n/**\n * Component that renders the row for <FixedDataTable />.\n * This component should not be used directly by developer. Instead,\n * only <FixedDataTable /> should use the component internally.\n */\n\nvar FixedDataTableRowImpl = function (_React$Component) {\n  _inherits(FixedDataTableRowImpl, _React$Component);\n\n  function FixedDataTableRowImpl() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, FixedDataTableRowImpl);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FixedDataTableRowImpl.__proto__ || Object.getPrototypeOf(FixedDataTableRowImpl)).call.apply(_ref, [this].concat(args))), _this), _this.mouseLeaveIndex = null, _this._getColumnsWidth = function (\n    /*array*/\n    columns)\n    /*number*/\n    {\n      var width = 0;\n\n      for (var i = 0; i < columns.length; ++i) {\n        width += columns[i].props.width;\n      }\n\n      return width;\n    }, _this._getRowExpanded = function (\n    /*number*/\n    subRowHeight)\n    /*?object*/\n    {\n      if (_this.props.rowExpanded) {\n        var rowExpandedProps = {\n          rowIndex: _this.props.index,\n          height: subRowHeight,\n          width: _this.props.width\n        };\n        var rowExpanded;\n\n        if (_react2.default.isValidElement(_this.props.rowExpanded)) {\n          rowExpanded = _react2.default.cloneElement(_this.props.rowExpanded, rowExpandedProps);\n        } else if (typeof _this.props.rowExpanded === 'function') {\n          rowExpanded = _this.props.rowExpanded(rowExpandedProps);\n        }\n\n        return rowExpanded;\n      }\n    }, _this._renderColumnsLeftShadow = function (\n    /*number*/\n    left)\n    /*?object*/\n    {\n      var className = (0, _cx2.default)({\n        'fixedDataTableRowLayout/fixedColumnsDivider': left > 0,\n        'fixedDataTableRowLayout/columnsShadow': _this.props.scrollLeft > 0,\n        'public/fixedDataTableRow/fixedColumnsDivider': left > 0,\n        'public/fixedDataTableRow/columnsShadow': _this.props.scrollLeft > 0\n      });\n      var dividerHeight = _this.props.cellGroupWrapperHeight ? _this.props.cellGroupWrapperHeight - HEADER_BORDER_BOTTOM_WIDTH : _this.props.height;\n      var style = {\n        left: left,\n        height: dividerHeight\n      };\n      return _react2.default.createElement('div', {\n        className: className,\n        style: style\n      });\n    }, _this._renderFixedRightColumnsShadow = function (\n    /*number*/\n    left)\n    /*?object*/\n    {\n      var className = (0, _cx2.default)('fixedDataTableRowLayout/columnsShadow', 'fixedDataTableRowLayout/columnsRightShadow', 'fixedDataTableRowLayout/fixedColumnsDivider', 'public/fixedDataTableRow/columnsShadow', 'public/fixedDataTableRow/columnsRightShadow', 'public/fixedDataTableRow/fixedColumnsDivider');\n      var style = {\n        height: _this.props.height,\n        left: left\n      };\n      return _react2.default.createElement('div', {\n        className: className,\n        style: style\n      });\n    }, _this._renderColumnsRightShadow = function (\n    /*number*/\n    totalWidth)\n    /*?object*/\n    {\n      if (Math.ceil(_this.props.scrollLeft + _this.props.width) < Math.floor(totalWidth)) {\n        var className = (0, _cx2.default)('fixedDataTableRowLayout/columnsShadow', 'fixedDataTableRowLayout/columnsRightShadow', 'public/fixedDataTableRow/columnsShadow', 'public/fixedDataTableRow/columnsRightShadow');\n        var style = {\n          height: _this.props.height\n        };\n        return _react2.default.createElement('div', {\n          className: className,\n          style: style\n        });\n      }\n    }, _this._onClick = function (\n    /*object*/\n    event) {\n      _this.props.onClick(event, _this.props.index);\n    }, _this._onDoubleClick = function (\n    /*object*/\n    event) {\n      _this.props.onDoubleClick(event, _this.props.index);\n    }, _this._onContextMenu = function (\n    /*object*/\n    event) {\n      _this.props.onContextMenu(event, _this.props.index);\n    }, _this._onMouseUp = function (\n    /*object*/\n    event) {\n      _this.props.onMouseUp(event, _this.props.index);\n    }, _this._onMouseDown = function (\n    /*object*/\n    event) {\n      _this.props.onMouseDown(event, _this.props.index);\n    }, _this._onMouseEnter = function (\n    /*object*/\n    event) {\n      /**\n       * This is necessary so that onMouseLeave is fired with the initial\n       * row index since this row could be updated with a different index\n       * when scrolling.\n       */\n      _this.mouseLeaveIndex = _this.props.index;\n\n      if (_this.props.onMouseEnter) {\n        _this.props.onMouseEnter(event, _this.props.index);\n      }\n    }, _this._onMouseLeave = function (\n    /*object*/\n    event) {\n      if (_this.mouseLeaveIndex === null) {\n        _this.mouseLeaveIndex = _this.props.index;\n      }\n\n      _this.props.onMouseLeave(event, _this.mouseLeaveIndex);\n\n      _this.mouseLeaveIndex = null;\n    }, _this._onTouchStart = function (\n    /*object*/\n    event) {\n      _this.props.onTouchStart(event, _this.props.index);\n    }, _this._onTouchEnd = function (\n    /*object*/\n    event) {\n      _this.props.onTouchEnd(event, _this.props.index);\n    }, _this._onTouchMove = function (\n    /*object*/\n    event) {\n      _this.props.onTouchMove(event, _this.props.index);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  /**\n   * The index of a row for which to fire the onMouseLeave event.\n   */\n\n\n  _createClass(FixedDataTableRowImpl, [{\n    key: 'render',\n    value: function render()\n    /*object*/\n    {\n      var subRowHeight = this.props.subRowHeight || 0;\n      var style = {\n        width: this.props.width,\n        height: this.props.height + subRowHeight\n      };\n      var className = (0, _cx2.default)({\n        'fixedDataTableRowLayout/main': true,\n        'public/fixedDataTableRow/main': true,\n        'public/fixedDataTableRow/highlighted': this.props.index % 2 === 1,\n        'public/fixedDataTableRow/odd': this.props.index % 2 === 1,\n        'public/fixedDataTableRow/even': this.props.index % 2 === 0\n      });\n\n      var fixedColumnsWidth = this._getColumnsWidth(this.props.fixedColumns);\n\n      var fixedColumns = _react2.default.createElement(_FixedDataTableCellGroup2.default, {\n        key: 'fixed_cells',\n        isScrolling: this.props.isScrolling,\n        height: this.props.height,\n        cellGroupWrapperHeight: this.props.cellGroupWrapperHeight,\n        left: 0,\n        width: fixedColumnsWidth,\n        zIndex: 2,\n        columns: this.props.fixedColumns,\n        touchEnabled: this.props.touchEnabled,\n        onColumnResize: this.props.onColumnResize,\n        onColumnReorder: this.props.onColumnReorder,\n        onColumnReorderMove: this.props.onColumnReorderMove,\n        onColumnReorderEnd: this.props.onColumnReorderEnd,\n        isColumnReordering: this.props.isColumnReordering,\n        columnReorderingData: this.props.columnReorderingData,\n        rowHeight: this.props.height,\n        rowIndex: this.props.index,\n        isHeaderOrFooter: this.props.isHeaderOrFooter\n      });\n\n      var columnsLeftShadow = this._renderColumnsLeftShadow(fixedColumnsWidth);\n\n      var fixedRightColumnsWidth = this._getColumnsWidth(this.props.fixedRightColumns);\n\n      var scrollbarOffset = this.props.showScrollbarY ? _Scrollbar2.default.SIZE : 0;\n\n      var fixedRightColumns = _react2.default.createElement(_FixedDataTableCellGroup2.default, {\n        key: 'fixed_right_cells',\n        isScrolling: this.props.isScrolling,\n        height: this.props.height,\n        cellGroupWrapperHeight: this.props.cellGroupWrapperHeight,\n        offsetLeft: this.props.width - fixedRightColumnsWidth - scrollbarOffset,\n        width: fixedRightColumnsWidth,\n        zIndex: 2,\n        columns: this.props.fixedRightColumns,\n        touchEnabled: this.props.touchEnabled,\n        onColumnResize: this.props.onColumnResize,\n        onColumnReorder: this.props.onColumnReorder,\n        onColumnReorderMove: this.props.onColumnReorderMove,\n        onColumnReorderEnd: this.props.onColumnReorderEnd,\n        isColumnReordering: this.props.isColumnReordering,\n        columnReorderingData: this.props.columnReorderingData,\n        rowHeight: this.props.height,\n        rowIndex: this.props.index,\n        isHeaderOrFooter: this.props.isHeaderOrFooter\n      });\n\n      var fixedRightColumnsShadow = fixedRightColumnsWidth ? this._renderFixedRightColumnsShadow(this.props.width - fixedRightColumnsWidth - scrollbarOffset - 5) : null;\n\n      var scrollableColumns = _react2.default.createElement(_FixedDataTableCellGroup2.default, {\n        key: 'scrollable_cells',\n        isScrolling: this.props.isScrolling,\n        height: this.props.height,\n        cellGroupWrapperHeight: this.props.cellGroupWrapperHeight,\n        align: 'right',\n        left: this.props.scrollLeft,\n        offsetLeft: fixedColumnsWidth,\n        width: this.props.width - fixedColumnsWidth - fixedRightColumnsWidth - scrollbarOffset,\n        zIndex: 0,\n        columns: this.props.scrollableColumns,\n        touchEnabled: this.props.touchEnabled,\n        onColumnResize: this.props.onColumnResize,\n        onColumnReorder: this.props.onColumnReorder,\n        onColumnReorderMove: this.props.onColumnReorderMove,\n        onColumnReorderEnd: this.props.onColumnReorderEnd,\n        isColumnReordering: this.props.isColumnReordering,\n        columnReorderingData: this.props.columnReorderingData,\n        rowHeight: this.props.height,\n        rowIndex: this.props.index,\n        isHeaderOrFooter: this.props.isHeaderOrFooter\n      });\n\n      var scrollableColumnsWidth = this._getColumnsWidth(this.props.scrollableColumns);\n\n      var columnsRightShadow = this._renderColumnsRightShadow(fixedColumnsWidth + scrollableColumnsWidth);\n\n      var rowExpanded = this._getRowExpanded(subRowHeight);\n\n      var rowExpandedStyle = {\n        height: subRowHeight,\n        top: this.props.height,\n        width: this.props.width\n      };\n      var scrollbarSpacer;\n\n      if (this.props.showScrollbarY) {\n        var spacerStyles = {\n          width: scrollbarOffset,\n          height: this.props.height,\n          left: this.props.width - scrollbarOffset\n        };\n        scrollbarSpacer = _react2.default.createElement('div', {\n          style: spacerStyles,\n          className: (0, _cx2.default)('public/fixedDataTable/scrollbarSpacer')\n        });\n      }\n\n      return _react2.default.createElement('div', {\n        className: (0, _joinClasses2.default)(className, this.props.className),\n        role: 'row',\n        'aria-rowindex': this.props.ariaIndex,\n        onClick: this.props.onClick ? this._onClick : null,\n        onDoubleClick: this.props.onDoubleClick ? this._onDoubleClick : null,\n        onContextMenu: this.props.onContextMenu ? this._onContextMenu : null,\n        onMouseDown: this.props.onMouseDown ? this._onMouseDown : null,\n        onMouseUp: this.props.onMouseUp ? this._onMouseUp : null,\n        onMouseEnter: this.props.onMouseEnter || this.props.onMouseLeave ? this._onMouseEnter : null,\n        onMouseLeave: this.props.onMouseLeave ? this._onMouseLeave : null,\n        onTouchStart: this.props.onTouchStart ? this._onTouchStart : null,\n        onTouchEnd: this.props.onTouchEnd ? this._onTouchEnd : null,\n        onTouchMove: this.props.onTouchMove ? this._onTouchMove : null,\n        style: style\n      }, _react2.default.createElement('div', {\n        className: (0, _cx2.default)('fixedDataTableRowLayout/body')\n      }, fixedColumns, scrollableColumns, columnsLeftShadow, fixedRightColumns, fixedRightColumnsShadow, scrollbarSpacer), rowExpanded && _react2.default.createElement('div', {\n        className: (0, _cx2.default)('fixedDataTableRowLayout/rowExpanded'),\n        style: rowExpandedStyle\n      }, rowExpanded), columnsRightShadow);\n    }\n  }]);\n\n  return FixedDataTableRowImpl;\n}(_react2.default.Component);\n\nFixedDataTableRowImpl.propTypes = {\n  isScrolling: _propTypes2.default.bool,\n\n  /**\n   * Array of <FixedDataTableColumn /> for the fixed columns.\n   */\n  fixedColumns: _propTypes2.default.array.isRequired,\n\n  /**\n   * Array of <FixedDataTableColumn /> for the fixed columns positioned at end of the table.\n   */\n  fixedRightColumns: _propTypes2.default.array.isRequired,\n\n  /**\n   * Height of the row.\n   */\n  height: _propTypes2.default.number.isRequired,\n\n  /**\n   * Height of fixedDataTableCellGroupLayout/cellGroupWrapper.\n   */\n  cellGroupWrapperHeight: _propTypes2.default.number,\n\n  /**\n   * Height of the content to be displayed below the row.\n   */\n  subRowHeight: _propTypes2.default.number,\n\n  /**\n   * the row expanded.\n   */\n  rowExpanded: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),\n\n  /**\n   * The row index.\n   */\n  index: _propTypes2.default.number.isRequired,\n\n  /**\n   * Array of <FixedDataTableColumn /> for the scrollable columns.\n   */\n  scrollableColumns: _propTypes2.default.array.isRequired,\n\n  /**\n   * The distance between the left edge of the table and the leftmost portion\n   * of the row currently visible in the table.\n   */\n  scrollLeft: _propTypes2.default.number.isRequired,\n\n  /**\n   * Width of the row.\n   */\n  width: _propTypes2.default.number.isRequired,\n\n  /**\n   * Fire when a row is clicked.\n   */\n  onClick: _propTypes2.default.func,\n\n  /**\n   * Fire when a row is double clicked.\n   */\n  onDoubleClick: _propTypes2.default.func,\n\n  /**\n   * Fire when a contextual-menu is requested above a row.\n   */\n  onContextMenu: _propTypes2.default.func,\n\n  /**\n   * Callback for when resizer knob (in FixedDataTableCell) is clicked\n   * to initialize resizing. Please note this is only on the cells\n   * in the header.\n   * @param number combinedWidth\n   * @param number leftOffset\n   * @param number cellWidth\n   * @param number|string columnKey\n   * @param object event\n   */\n  onColumnResize: _propTypes2.default.func,\n  isColumnReordering: _propTypes2.default.bool,\n\n  /**\n   * Callback for when reorder handle (in FixedDataTableCell) is clicked\n   * to initialize reordering. Please note this is only on the cells\n   * in the header.\n   * @param number|string columnKey\n   * @param number cellWidth\n   * @param number leftOffset\n   * @param object event\n   */\n  onColumnReorder: _propTypes2.default.func,\n\n  /**\n   * Callback for when a cell is moved while reordering.\n   * @param number distance\n   */\n  onColumnReorderMove: _propTypes2.default.func,\n\n  /**\n   * Callback for when the mouse is released to complete reordering.\n   * @param number distance\n   */\n  onColumnReorderEnd: _propTypes2.default.func,\n  touchEnabled: _propTypes2.default.bool,\n  isHeaderOrFooter: _propTypes2.default.bool,\n\n  /**\n  * The value of the aria-rowindex attribute.\n  */\n  ariaIndex: _propTypes2.default.number\n};\n\nvar FixedDataTableRow = function (_React$Component2) {\n  _inherits(FixedDataTableRow, _React$Component2);\n\n  function FixedDataTableRow() {\n    _classCallCheck(this, FixedDataTableRow);\n\n    return _possibleConstructorReturn(this, (FixedDataTableRow.__proto__ || Object.getPrototypeOf(FixedDataTableRow)).apply(this, arguments));\n  }\n\n  _createClass(FixedDataTableRow, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this._initialRender = true;\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._initialRender = false;\n    }\n  }, {\n    key: 'render',\n    value: function render()\n    /*object*/\n    {\n      var style = {\n        width: this.props.width,\n        height: this.props.height,\n        zIndex: this.props.zIndex ? this.props.zIndex : 0\n      };\n      (0, _FixedDataTableTranslateDOMPosition2.default)(style, 0, this.props.offsetTop, this._initialRender);\n      return _react2.default.createElement('div', {\n        style: style,\n        className: (0, _cx2.default)('fixedDataTableRowLayout/rowWrapper')\n      }, _react2.default.createElement(FixedDataTableRowImpl, _extends({}, this.props, {\n        offsetTop: undefined,\n        zIndex: undefined\n      })));\n    }\n  }]);\n\n  return FixedDataTableRow;\n}(_react2.default.Component);\n\nFixedDataTableRow.propTypes = {\n  isScrolling: _propTypes2.default.bool,\n\n  /**\n   * Height of the row.\n   */\n  height: _propTypes2.default.number.isRequired,\n\n  /**\n   * Z-index on which the row will be displayed. Used e.g. for keeping\n   * header and footer in front of other rows.\n   */\n  zIndex: _propTypes2.default.number,\n\n  /**\n   * The vertical position where the row should render itself\n   */\n  offsetTop: _propTypes2.default.number.isRequired,\n\n  /**\n   * Width of the row.\n   */\n  width: _propTypes2.default.number.isRequired\n};\nmodule.exports = FixedDataTableRow;","map":null,"metadata":{},"sourceType":"script"}