{"ast":null,"code":"/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableCellGroup\n * @typechecks\n */\n'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _FixedDataTableHelper = require('./FixedDataTableHelper');\n\nvar _FixedDataTableHelper2 = _interopRequireDefault(_FixedDataTableHelper);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _FixedDataTableCell = require('./FixedDataTableCell');\n\nvar _FixedDataTableCell2 = _interopRequireDefault(_FixedDataTableCell);\n\nvar _cx = require('./cx');\n\nvar _cx2 = _interopRequireDefault(_cx);\n\nvar _FixedDataTableTranslateDOMPosition = require('./FixedDataTableTranslateDOMPosition');\n\nvar _FixedDataTableTranslateDOMPosition2 = _interopRequireDefault(_FixedDataTableTranslateDOMPosition);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar DIR_SIGN = _FixedDataTableHelper2.default.DIR_SIGN;\nvar FixedDataTableCellGroupImpl = (0, _createReactClass2.default)({\n  displayName: 'FixedDataTableCellGroupImpl',\n\n  /**\n   * PropTypes are disabled in this component, because having them on slows\n   * down the FixedDataTable hugely in DEV mode. You can enable them back for\n   * development, but please don't commit this component with enabled propTypes.\n   */\n  propTypes_DISABLED_FOR_PERFORMANCE: {\n    /**\n     * Array of <FixedDataTableColumn />.\n     */\n    columns: _propTypes2.default.array.isRequired,\n    isScrolling: _propTypes2.default.bool,\n    left: _propTypes2.default.number,\n    onColumnResize: _propTypes2.default.func,\n    onColumnReorder: _propTypes2.default.func,\n    onColumnReorderMove: _propTypes2.default.func,\n    onColumnReorderEnd: _propTypes2.default.func,\n    height: _propTypes2.default.number.isRequired,\n\n    /**\n     * Height of fixedDataTableCellGroupLayout/cellGroupWrapper.\n     */\n    cellGroupWrapperHeight: _propTypes2.default.number,\n    rowHeight: _propTypes2.default.number.isRequired,\n    rowIndex: _propTypes2.default.number.isRequired,\n    width: _propTypes2.default.number.isRequired,\n    zIndex: _propTypes2.default.number.isRequired,\n    touchEnabled: _propTypes2.default.bool,\n    isHeaderOrFooter: _propTypes2.default.bool\n  },\n  componentWillMount: function componentWillMount() {\n    this._initialRender = true;\n  },\n  componentDidMount: function componentDidMount() {\n    this._initialRender = false;\n  },\n  render: function render()\n  /*object*/\n  {\n    var props = this.props;\n    var columns = props.columns;\n    var cells = new Array(columns.length);\n\n    var contentWidth = this._getColumnsWidth(columns);\n\n    var isColumnReordering = props.isColumnReordering && columns.reduce(function (acc, column) {\n      return acc || props.columnReorderingData.columnKey === column.props.columnKey;\n    }, false);\n    var currentPosition = 0;\n\n    for (var i = 0, j = columns.length; i < j; i++) {\n      var columnProps = columns[i].props;\n      var recycable = columnProps.allowCellsRecycling && !isColumnReordering;\n\n      if (!recycable || currentPosition - props.left <= props.width && currentPosition - props.left + columnProps.width >= 0) {\n        var key = columnProps.columnKey || 'cell_' + i;\n        cells[i] = this._renderCell(props.rowIndex, props.rowHeight, columnProps, currentPosition, key, contentWidth, isColumnReordering);\n      }\n\n      currentPosition += columnProps.width;\n    }\n\n    var style = {\n      height: props.height,\n      position: 'absolute',\n      width: contentWidth,\n      zIndex: props.zIndex\n    };\n    (0, _FixedDataTableTranslateDOMPosition2.default)(style, -1 * DIR_SIGN * props.left, 0, this._initialRender);\n    return _react2.default.createElement('div', {\n      className: (0, _cx2.default)('fixedDataTableCellGroupLayout/cellGroup'),\n      style: style\n    }, cells);\n  },\n  _renderCell: function _renderCell(\n  /*number*/\n  rowIndex,\n  /*number*/\n  height,\n  /*object*/\n  columnProps,\n  /*number*/\n  left,\n  /*string*/\n  key,\n  /*number*/\n  columnGroupWidth,\n  /*boolean*/\n  isColumnReordering)\n  /*object*/\n  {\n    var cellIsResizable = columnProps.isResizable && this.props.onColumnResize;\n    var onColumnResize = cellIsResizable ? this.props.onColumnResize : null;\n    var cellIsReorderable = columnProps.isReorderable && this.props.onColumnReorder && rowIndex === -1 && columnGroupWidth !== columnProps.width;\n    var onColumnReorder = cellIsReorderable ? this.props.onColumnReorder : null;\n    var className = columnProps.cellClassName;\n    var pureRendering = columnProps.pureRendering || false;\n    return _react2.default.createElement(_FixedDataTableCell2.default, {\n      isScrolling: this.props.isScrolling,\n      isHeaderOrFooter: this.props.isHeaderOrFooter,\n      align: columnProps.align,\n      className: className,\n      height: height,\n      key: key,\n      maxWidth: columnProps.maxWidth,\n      minWidth: columnProps.minWidth,\n      touchEnabled: this.props.touchEnabled,\n      onColumnResize: onColumnResize,\n      onColumnReorder: onColumnReorder,\n      onColumnReorderMove: this.props.onColumnReorderMove,\n      onColumnReorderEnd: this.props.onColumnReorderEnd,\n      isColumnReordering: isColumnReordering,\n      columnReorderingData: this.props.columnReorderingData,\n      rowIndex: rowIndex,\n      columnKey: columnProps.columnKey,\n      width: columnProps.width,\n      left: left,\n      cell: columnProps.cell,\n      columnGroupWidth: columnGroupWidth,\n      pureRendering: pureRendering\n    });\n  },\n  _getColumnsWidth: function _getColumnsWidth(\n  /*array*/\n  columns)\n  /*number*/\n  {\n    var width = 0;\n\n    for (var i = 0; i < columns.length; ++i) {\n      width += columns[i].props.width;\n    }\n\n    return width;\n  }\n});\nvar FixedDataTableCellGroup = (0, _createReactClass2.default)({\n  displayName: 'FixedDataTableCellGroup',\n\n  /**\n   * PropTypes are disabled in this component, because having them on slows\n   * down the FixedDataTable hugely in DEV mode. You can enable them back for\n   * development, but please don't commit this component with enabled propTypes.\n   */\n  propTypes_DISABLED_FOR_PERFORMANCE: {\n    isScrolling: _propTypes2.default.bool,\n\n    /**\n     * Height of the row.\n     */\n    height: _propTypes2.default.number.isRequired,\n    offsetLeft: _propTypes2.default.number,\n    left: _propTypes2.default.number,\n\n    /**\n     * Z-index on which the row will be displayed. Used e.g. for keeping\n     * header and footer in front of other rows.\n     */\n    zIndex: _propTypes2.default.number.isRequired,\n    isHeaderOrFooter: _propTypes2.default.bool\n  },\n  shouldComponentUpdate: function shouldComponentUpdate(\n  /*object*/\n  nextProps)\n  /*boolean*/\n  {\n    return !nextProps.isScrolling || this.props.rowIndex !== nextProps.rowIndex || this.props.left !== nextProps.left;\n  },\n  getDefaultProps: function getDefaultProps()\n  /*object*/\n  {\n    return {\n      left: 0,\n      offsetLeft: 0\n    };\n  },\n  render: function render()\n  /*object*/\n  {\n    var _props = this.props,\n        offsetLeft = _props.offsetLeft,\n        props = _objectWithoutProperties(_props, ['offsetLeft']);\n\n    var style = {\n      height: props.cellGroupWrapperHeight || props.height,\n      width: props.width\n    };\n\n    if (DIR_SIGN === 1) {\n      style.left = offsetLeft;\n    } else {\n      style.right = offsetLeft;\n    }\n\n    var onColumnResize = props.onColumnResize ? this._onColumnResize : null;\n    return _react2.default.createElement('div', {\n      style: style,\n      className: (0, _cx2.default)('fixedDataTableCellGroupLayout/cellGroupWrapper')\n    }, _react2.default.createElement(FixedDataTableCellGroupImpl, _extends({}, props, {\n      onColumnResize: onColumnResize\n    })));\n  },\n  _onColumnResize: function _onColumnResize(\n  /*number*/\n  left,\n  /*number*/\n  width,\n  /*?number*/\n  minWidth,\n  /*?number*/\n  maxWidth,\n  /*string|number*/\n  columnKey,\n  /*object*/\n  event) {\n    this.props.onColumnResize && this.props.onColumnResize(this.props.offsetLeft, left - this.props.left + width, width, minWidth, maxWidth, columnKey, event);\n  }\n});\nmodule.exports = FixedDataTableCellGroup;","map":null,"metadata":{},"sourceType":"script"}