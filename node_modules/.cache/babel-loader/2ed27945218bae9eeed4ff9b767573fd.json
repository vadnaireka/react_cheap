{"ast":null,"code":"/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * This is utility that handles onWheel events and calls provided wheel\n * callback with correct frame rate.\n *\n * @providesModule ReactWheelHandler\n * @typechecks\n */\n'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _emptyFunction = require('./emptyFunction');\n\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\n\nvar _normalizeWheel = require('./normalizeWheel');\n\nvar _normalizeWheel2 = _interopRequireDefault(_normalizeWheel);\n\nvar _requestAnimationFramePolyfill = require('./requestAnimationFramePolyfill');\n\nvar _requestAnimationFramePolyfill2 = _interopRequireDefault(_requestAnimationFramePolyfill);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ReactWheelHandler = function () {\n  /**\n   * onWheel is the callback that will be called with right frame rate if\n   * any wheel events happened\n   * onWheel should is to be called with two arguments: deltaX and deltaY in\n   * this order\n   */\n  function ReactWheelHandler(\n  /*function*/\n  onWheel,\n  /*boolean|function*/\n  handleScrollX,\n  /*boolean|function*/\n  handleScrollY,\n  /*?boolean|?function*/\n  stopPropagation) {\n    _classCallCheck(this, ReactWheelHandler);\n\n    this._animationFrameID = null;\n    this._deltaX = 0;\n    this._deltaY = 0;\n    this._didWheel = this._didWheel.bind(this);\n    this._rootRef = null;\n\n    if (typeof handleScrollX !== 'function') {\n      handleScrollX = handleScrollX ? _emptyFunction2.default.thatReturnsTrue : _emptyFunction2.default.thatReturnsFalse;\n    }\n\n    if (typeof handleScrollY !== 'function') {\n      handleScrollY = handleScrollY ? _emptyFunction2.default.thatReturnsTrue : _emptyFunction2.default.thatReturnsFalse;\n    }\n\n    if (typeof stopPropagation !== 'function') {\n      stopPropagation = stopPropagation ? _emptyFunction2.default.thatReturnsTrue : _emptyFunction2.default.thatReturnsFalse;\n    }\n\n    this._handleScrollX = handleScrollX;\n    this._handleScrollY = handleScrollY;\n    this._stopPropagation = stopPropagation;\n    this._onWheelCallback = onWheel;\n    this.onWheel = this.onWheel.bind(this);\n  }\n\n  _createClass(ReactWheelHandler, [{\n    key: 'contains',\n    value: function contains(target) {\n      var parent = target;\n\n      while (parent != document.body) {\n        if (parent === this._rootRef) {\n          return true;\n        }\n\n        parent = parent.parentNode;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'onWheel',\n    value: function onWheel(\n    /*object*/\n    event) {\n      var normalizedEvent = (0, _normalizeWheel2.default)(event); // if shift is held, swap the axis of scrolling.\n\n      if (event.shiftKey && ReactWheelHandler._allowInternalAxesSwap()) {\n        normalizedEvent = ReactWheelHandler._swapNormalizedWheelAxis(normalizedEvent);\n      }\n\n      var deltaX = this._deltaX + normalizedEvent.pixelX;\n      var deltaY = this._deltaY + normalizedEvent.pixelY;\n\n      var handleScrollX = this._handleScrollX(deltaX, deltaY);\n\n      var handleScrollY = this._handleScrollY(deltaY, deltaX);\n\n      if (!handleScrollX && !handleScrollY) {\n        return;\n      }\n\n      if (this._rootRef && !this.contains(event.target)) {\n        return;\n      }\n\n      this._deltaX += handleScrollX ? normalizedEvent.pixelX : 0;\n      this._deltaY += handleScrollY ? normalizedEvent.pixelY : 0;\n      event.preventDefault();\n      var changed;\n\n      if (this._deltaX !== 0 || this._deltaY !== 0) {\n        if (this._stopPropagation()) {\n          event.stopPropagation();\n        }\n\n        changed = true;\n      }\n\n      if (changed === true && this._animationFrameID === null) {\n        this._animationFrameID = (0, _requestAnimationFramePolyfill2.default)(this._didWheel);\n      }\n    }\n  }, {\n    key: 'setRoot',\n    value: function setRoot(rootRef) {\n      this._rootRef = rootRef;\n    }\n  }, {\n    key: '_didWheel',\n    value: function _didWheel() {\n      this._animationFrameID = null;\n\n      this._onWheelCallback(this._deltaX, this._deltaY);\n\n      this._deltaX = 0;\n      this._deltaY = 0;\n    }\n  }], [{\n    key: '_swapNormalizedWheelAxis',\n    value: function _swapNormalizedWheelAxis(\n    /*object*/\n    normalizedEvent)\n    /*object*/\n    {\n      return {\n        spinX: normalizedEvent.spinY,\n        spinY: normalizedEvent.spinX,\n        pixelX: normalizedEvent.pixelY,\n        pixelY: normalizedEvent.pixelX\n      };\n    }\n  }, {\n    key: '_allowInternalAxesSwap',\n    value: function _allowInternalAxesSwap()\n    /*boolean*/\n    {\n      return navigator.platform !== \"MacIntel\";\n    }\n  }]);\n\n  return ReactWheelHandler;\n}();\n\nmodule.exports = ReactWheelHandler;","map":null,"metadata":{},"sourceType":"script"}