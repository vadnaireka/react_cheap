{"ast":null,"code":"'use strict';\n\nvar _DOMMouseMoveTracker = require('./DOMMouseMoveTracker');\n\nvar _DOMMouseMoveTracker2 = _interopRequireDefault(_DOMMouseMoveTracker);\n\nvar _Locale = require('./Locale');\n\nvar _Locale2 = _interopRequireDefault(_Locale);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _ReactComponentWithPureRenderMixin = require('./ReactComponentWithPureRenderMixin');\n\nvar _ReactComponentWithPureRenderMixin2 = _interopRequireDefault(_ReactComponentWithPureRenderMixin);\n\nvar _clamp = require('./clamp');\n\nvar _clamp2 = _interopRequireDefault(_clamp);\n\nvar _cx = require('./cx');\n\nvar _cx2 = _interopRequireDefault(_cx);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * This is to be used with the FixedDataTable. It is a read line\n * that when you click on a column that is resizable appears and allows\n * you to resize the corresponding column.\n *\n * @providesModule FixedDataTableColumnResizeHandle\n * @typechecks\n */\n\n\nvar FixedDataTableColumnResizeHandle = (0, _createReactClass2.default)({\n  displayName: 'FixedDataTableColumnResizeHandle',\n  mixins: [_ReactComponentWithPureRenderMixin2.default],\n  propTypes: {\n    visible: _propTypes2.default.bool.isRequired,\n\n    /**\n     * This is the height of the line\n     */\n    height: _propTypes2.default.number.isRequired,\n\n    /**\n     * Offset from left border of the table, please note\n     * that the line is a border on diff. So this is really the\n     * offset of the column itself.\n     */\n    leftOffset: _propTypes2.default.number.isRequired,\n\n    /**\n     * Height of the clickable region of the line.\n     * This is assumed to be at the top of the line.\n     */\n    knobHeight: _propTypes2.default.number.isRequired,\n\n    /**\n     * The line is a border on a diff, so this is essentially\n     * the width of column.\n     */\n    initialWidth: _propTypes2.default.number,\n\n    /**\n     * The minimum width this dragger will collapse to\n     */\n    minWidth: _propTypes2.default.number,\n\n    /**\n     * The maximum width this dragger will collapse to\n     */\n    maxWidth: _propTypes2.default.number,\n\n    /**\n     * Initial click event on the header cell.\n     */\n    initialEvent: _propTypes2.default.object,\n\n    /**\n     * When resizing is complete this is called.\n     */\n    onColumnResizeEnd: _propTypes2.default.func,\n\n    /**\n     * Column key for the column being resized.\n     */\n    columnKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n\n    /**\n     * Whether the resize handle should respond to touch events or not.\n     */\n    touchEnabled: _propTypes2.default.bool\n  },\n  getInitialState: function getInitialState()\n  /*object*/\n  {\n    return {\n      width: 0,\n      cursorDelta: 0\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(\n  /*object*/\n  newProps) {\n    if (newProps.initialEvent && !this._mouseMoveTracker.isDragging()) {\n      this._mouseMoveTracker.captureMouseMoves(newProps.initialEvent);\n\n      this.setState({\n        width: newProps.initialWidth,\n        cursorDelta: newProps.initialWidth\n      });\n    }\n  },\n  componentDidMount: function componentDidMount() {\n    this._mouseMoveTracker = new _DOMMouseMoveTracker2.default(this._onMove, this._onColumnResizeEnd, document.body, this.props.touchEnabled);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this._mouseMoveTracker.releaseMouseMoves();\n\n    this._mouseMoveTracker = null;\n  },\n  render: function render()\n  /*object*/\n  {\n    var style = {\n      width: this.state.width,\n      height: this.props.height\n    };\n\n    if (_Locale2.default.isRTL()) {\n      style.right = this.props.leftOffset;\n    } else {\n      style.left = this.props.leftOffset;\n    }\n\n    return _react2.default.createElement('div', {\n      className: (0, _cx2.default)({\n        'fixedDataTableColumnResizerLineLayout/main': true,\n        'fixedDataTableColumnResizerLineLayout/hiddenElem': !this.props.visible,\n        'public/fixedDataTableColumnResizerLine/main': true\n      }),\n      style: style\n    }, _react2.default.createElement('div', {\n      className: (0, _cx2.default)('fixedDataTableColumnResizerLineLayout/mouseArea'),\n      style: {\n        height: this.props.height\n      }\n    }));\n  },\n  _onMove: function _onMove(\n  /*number*/\n  deltaX) {\n    if (_Locale2.default.isRTL()) {\n      deltaX = -deltaX;\n    }\n\n    var newWidth = this.state.cursorDelta + deltaX;\n    var newColumnWidth = (0, _clamp2.default)(newWidth, this.props.minWidth, this.props.maxWidth); // Please note cursor delta is the different between the currently width\n    // and the new width.\n\n    this.setState({\n      width: newColumnWidth,\n      cursorDelta: newWidth\n    });\n  },\n  _onColumnResizeEnd: function _onColumnResizeEnd() {\n    this._mouseMoveTracker.releaseMouseMoves();\n\n    this.props.onColumnResizeEnd(this.state.width, this.props.columnKey);\n  }\n});\nmodule.exports = FixedDataTableColumnResizeHandle;","map":null,"metadata":{},"sourceType":"script"}