{"ast":null,"code":"/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableWidthHelper\n * @typechecks\n */\n'use strict';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getTotalWidth(\n/*array*/\ncolumns)\n/*number*/\n{\n  var totalWidth = 0;\n\n  for (var i = 0; i < columns.length; ++i) {\n    totalWidth += columns[i].props.width;\n  }\n\n  return totalWidth;\n}\n\nfunction getTotalFlexGrow(\n/*array*/\ncolumns)\n/*number*/\n{\n  var totalFlexGrow = 0;\n\n  for (var i = 0; i < columns.length; ++i) {\n    totalFlexGrow += columns[i].props.flexGrow || 0;\n  }\n\n  return totalFlexGrow;\n}\n\nfunction distributeFlexWidth(\n/*array*/\ncolumns,\n/*number*/\nflexWidth)\n/*object*/\n{\n  if (flexWidth <= 0) {\n    return {\n      columns: columns,\n      width: getTotalWidth(columns)\n    };\n  }\n\n  var remainingFlexGrow = getTotalFlexGrow(columns);\n  var remainingFlexWidth = flexWidth;\n  var newColumns = [];\n  var totalWidth = 0;\n\n  for (var i = 0; i < columns.length; ++i) {\n    var column = columns[i];\n\n    if (!column.props.flexGrow) {\n      totalWidth += column.props.width;\n      newColumns.push(column);\n      continue;\n    }\n\n    var columnFlexWidth = Math.floor(column.props.flexGrow / remainingFlexGrow * remainingFlexWidth);\n    var newColumnWidth = Math.floor(column.props.width + columnFlexWidth);\n    totalWidth += newColumnWidth;\n    remainingFlexGrow -= column.props.flexGrow;\n    remainingFlexWidth -= columnFlexWidth;\n    newColumns.push(_react2.default.cloneElement(column, {\n      width: newColumnWidth\n    }));\n  }\n\n  return {\n    columns: newColumns,\n    width: totalWidth\n  };\n}\n\nfunction adjustColumnGroupWidths(\n/*array*/\ncolumnGroups,\n/*number*/\nexpectedWidth)\n/*object*/\n{\n  var allColumns = [];\n  var i;\n\n  for (i = 0; i < columnGroups.length; ++i) {\n    _react2.default.Children.forEach(columnGroups[i].props.children, function (column) {\n      allColumns.push(column);\n    });\n  }\n\n  var columnsWidth = getTotalWidth(allColumns);\n  var remainingFlexGrow = getTotalFlexGrow(allColumns);\n  var remainingFlexWidth = Math.max(expectedWidth - columnsWidth, 0);\n  var newAllColumns = [];\n  var newColumnGroups = [];\n\n  for (i = 0; i < columnGroups.length; ++i) {\n    var columnGroup = columnGroups[i];\n    var currentColumns = [];\n\n    _react2.default.Children.forEach(columnGroup.props.children, function (column) {\n      currentColumns.push(column);\n    });\n\n    var columnGroupFlexGrow = getTotalFlexGrow(currentColumns);\n    var columnGroupFlexWidth = Math.floor(columnGroupFlexGrow / remainingFlexGrow * remainingFlexWidth);\n    var newColumnSettings = distributeFlexWidth(currentColumns, columnGroupFlexWidth);\n    remainingFlexGrow -= columnGroupFlexGrow;\n    remainingFlexWidth -= columnGroupFlexWidth;\n\n    for (var j = 0; j < newColumnSettings.columns.length; ++j) {\n      newAllColumns.push(newColumnSettings.columns[j]);\n    }\n\n    newColumnGroups.push(_react2.default.cloneElement(columnGroup, {\n      width: newColumnSettings.width\n    }));\n  }\n\n  return {\n    columns: newAllColumns,\n    columnGroups: newColumnGroups\n  };\n}\n\nfunction adjustColumnWidths(\n/*array*/\ncolumns,\n/*number*/\nexpectedWidth)\n/*array*/\n{\n  var columnsWidth = getTotalWidth(columns);\n\n  if (columnsWidth < expectedWidth) {\n    return distributeFlexWidth(columns, expectedWidth - columnsWidth).columns;\n  }\n\n  return columns;\n}\n\nvar FixedDataTableWidthHelper = {\n  getTotalWidth: getTotalWidth,\n  getTotalFlexGrow: getTotalFlexGrow,\n  distributeFlexWidth: distributeFlexWidth,\n  adjustColumnWidths: adjustColumnWidths,\n  adjustColumnGroupWidths: adjustColumnGroupWidths\n};\nmodule.exports = FixedDataTableWidthHelper;","map":null,"metadata":{},"sourceType":"script"}