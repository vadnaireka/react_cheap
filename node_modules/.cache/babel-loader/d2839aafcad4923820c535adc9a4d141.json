{"ast":null,"code":"/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * This is utility that handles touch events and calls provided touch\n * callback with correct frame rate.\n * Deceleration logic based on http://ariya.ofilabs.com/2013/11/javascript-kinetic-scrolling-part-2.html\n *\n * @providesModule ReactTouchHandler\n * @typechecks\n */\n'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _emptyFunction = require('./emptyFunction');\n\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\n\nvar _requestAnimationFramePolyfill = require('./requestAnimationFramePolyfill');\n\nvar _requestAnimationFramePolyfill2 = _interopRequireDefault(_requestAnimationFramePolyfill);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar MOVE_AMPLITUDE = 1.6;\nvar DECELERATION_AMPLITUDE = 1.6;\nvar DECELERATION_FACTOR = 325;\nvar TRACKER_TIMEOUT = 100;\n\nvar ReactTouchHandler = function () {\n  /**\n   * onTouchScroll is the callback that will be called with right frame rate if\n   * any touch events happened\n   * onTouchScroll should is to be called with two arguments: deltaX and deltaY in\n   * this order\n   */\n  function ReactTouchHandler(\n  /*function*/\n  onTouchScroll,\n  /*boolean|function*/\n  handleScrollX,\n  /*boolean|function*/\n  handleScrollY,\n  /*?boolean|?function*/\n  stopPropagation) {\n    _classCallCheck(this, ReactTouchHandler); // The animation frame id for the drag scroll\n\n\n    this._dragAnimationId = null; // The interval id for tracking the drag velocity\n\n    this._trackerId = null; // Used to track the drag scroll delta while waiting for an animation frame\n\n    this._deltaX = 0;\n    this._deltaY = 0; // The last touch we processed while dragging.  Used to compute the delta and velocity above\n\n    this._lastTouchX = 0;\n    this._lastTouchY = 0; // Used to track a moving average of the scroll velocity while dragging\n\n    this._velocityX = 0;\n    this._velocityY = 0; // An accummulated drag scroll delta used to calculate velocity\n\n    this._accumulatedDeltaX = 0;\n    this._accumulatedDeltaY = 0; // Timestamp from the last interval frame we used to track velocity\n\n    this._lastFrameTimestamp = Date.now(); // Timestamp from the last animation frame we used to autoscroll after drag stop\n\n    this._autoScrollTimestamp = Date.now();\n\n    if (typeof handleScrollX !== 'function') {\n      handleScrollX = handleScrollX ? _emptyFunction2.default.thatReturnsTrue : _emptyFunction2.default.thatReturnsFalse;\n    }\n\n    if (typeof handleScrollY !== 'function') {\n      handleScrollY = handleScrollY ? _emptyFunction2.default.thatReturnsTrue : _emptyFunction2.default.thatReturnsFalse;\n    } // TODO (jordan) Is configuring this necessary\n\n\n    if (typeof stopPropagation !== 'function') {\n      stopPropagation = stopPropagation ? _emptyFunction2.default.thatReturnsTrue : _emptyFunction2.default.thatReturnsFalse;\n    }\n\n    this._handleScrollX = handleScrollX;\n    this._handleScrollY = handleScrollY;\n    this._stopPropagation = stopPropagation;\n    this._onTouchScrollCallback = onTouchScroll;\n    this._didTouchMove = this._didTouchMove.bind(this);\n    this._track = this._track.bind(this);\n    this._autoScroll = this._autoScroll.bind(this);\n    this._startAutoScroll = this._startAutoScroll.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.onTouchCancel = this.onTouchCancel.bind(this);\n  }\n\n  _createClass(ReactTouchHandler, [{\n    key: 'onTouchStart',\n    value: function onTouchStart(\n    /*object*/\n    event) {\n      // Start tracking drag delta for scrolling\n      this._lastTouchX = event.touches[0].pageX;\n      this._lastTouchY = event.touches[0].pageY; // Reset our velocity and intermediate data used to compute velocity\n\n      this._velocityX = 0;\n      this._velocityY = 0;\n      this._accumulatedDeltaX = 0;\n      this._accumulatedDeltaY = 0;\n      this._lastFrameTimestamp = Date.now(); // Setup interval for tracking velocity\n\n      clearInterval(this._trackerId);\n      this._trackerId = setInterval(this._track, TRACKER_TIMEOUT);\n\n      if (this._stopPropagation()) {\n        event.stopPropagation();\n      }\n    }\n  }, {\n    key: 'onTouchEnd',\n    value: function onTouchEnd(\n    /*object*/\n    event) {\n      // Stop tracking velocity\n      clearInterval(this._trackerId);\n      this._trackerId = null; // Initialize decelerating autoscroll on drag stop\n\n      (0, _requestAnimationFramePolyfill2.default)(this._startAutoScroll);\n\n      if (this._stopPropagation()) {\n        event.stopPropagation();\n      }\n    }\n  }, {\n    key: 'onTouchCancel',\n    value: function onTouchCancel(\n    /*object*/\n    event) {\n      // Stop tracking velocity\n      clearInterval(this._trackerId);\n      this._trackerId = null;\n\n      if (this._stopPropagation()) {\n        event.stopPropagation();\n      }\n    }\n  }, {\n    key: 'onTouchMove',\n    value: function onTouchMove(\n    /*object*/\n    event) {\n      var moveX = event.touches[0].pageX;\n      var moveY = event.touches[0].pageY; // Compute delta scrolled since last drag\n      // Mobile, scrolling is inverted\n\n      this._deltaX = MOVE_AMPLITUDE * (this._lastTouchX - moveX);\n      this._deltaY = MOVE_AMPLITUDE * (this._lastTouchY - moveY);\n\n      var handleScrollX = this._handleScrollX(this._deltaX, this._deltaY);\n\n      var handleScrollY = this._handleScrollY(this._deltaY, this._deltaX);\n\n      if (!handleScrollX && !handleScrollY) {\n        return;\n      } // If we can handle scroll update last touch for computing delta\n\n\n      if (handleScrollX) {\n        this._lastTouchX = moveX;\n      } else {\n        this._deltaX = 0;\n      }\n\n      if (handleScrollY) {\n        this._lastTouchY = moveY;\n      } else {\n        this._deltaY = 0;\n      }\n\n      event.preventDefault(); // Ensure minimum delta magnitude is met to avoid jitter\n\n      var changed = false;\n\n      if (Math.abs(this._deltaX) > 2 || Math.abs(this._deltaY) > 2) {\n        if (this._stopPropagation()) {\n          event.stopPropagation();\n        }\n\n        changed = true;\n      } // Request animation frame to trigger scroll of computed delta\n\n\n      if (changed === true && this._dragAnimationId === null) {\n        this._dragAnimationId = (0, _requestAnimationFramePolyfill2.default)(this._didTouchMove);\n      }\n    }\n    /**\n     * Fire scroll callback based on computed drag delta.\n     * Also track accummulated delta so we can calculate velocity\n     */\n\n  }, {\n    key: '_didTouchMove',\n    value: function _didTouchMove() {\n      this._dragAnimationId = null;\n\n      this._onTouchScrollCallback(this._deltaX, this._deltaY);\n\n      this._accumulatedDeltaX += this._deltaX;\n      this._accumulatedDeltaY += this._deltaY;\n      this._deltaX = 0;\n      this._deltaY = 0;\n    }\n    /**\n     * Compute velocity based on a weighted average of drag over last 100 ms and\n     * previous velocity.  Combining into a moving average results in a smoother scroll.\n     */\n\n  }, {\n    key: '_track',\n    value: function _track() {\n      var now = Date.now();\n      var elapsed = now - this._lastFrameTimestamp;\n      var oldVelocityX = this._velocityX;\n      var oldVelocityY = this._velocityY; // We compute velocity using a weighted average of the current velocity and the previous velocity\n      // If the previous velocity is 0, put the full weight on the last 100 ms\n\n      var weight = 0.8;\n\n      if (elapsed < TRACKER_TIMEOUT) {\n        weight *= elapsed / TRACKER_TIMEOUT;\n      }\n\n      if (oldVelocityX === 0 && oldVelocityY === 0) {\n        weight = 1;\n      } // Formula for computing weighted average of velocity\n\n\n      this._velocityX = weight * (TRACKER_TIMEOUT * this._accumulatedDeltaX / (1 + elapsed));\n\n      if (weight < 1) {\n        this._velocityX += (1 - weight) * oldVelocityX;\n      }\n\n      this._velocityY = weight * (TRACKER_TIMEOUT * this._accumulatedDeltaY / (1 + elapsed));\n\n      if (weight < 1) {\n        this._velocityY += (1 - weight) * oldVelocityY;\n      }\n\n      this._accumulatedDeltaX = 0;\n      this._accumulatedDeltaY = 0;\n      this._lastFrameTimestamp = now;\n    }\n    /**\n     * To kick off deceleration / momentum scrolling,\n     * handle any scrolling from a drag which was waiting for an animation frame\n     * Then update our velocity\n     * Finally start the momentum scrolling handler (autoScroll)\n     */\n\n  }, {\n    key: '_startAutoScroll',\n    value: function _startAutoScroll() {\n      this._autoScrollTimestamp = Date.now();\n\n      if (this._deltaX > 0 || this.deltaY > 0) {\n        this._didTouchMove();\n      }\n\n      this._track();\n\n      this._autoScroll();\n    }\n    /**\n     * Compute a scroll delta with an exponential decay based on time elapsed since drag was released.\n     * This is called recursively on animation frames until the delta is below a threshold (5 pixels)\n     */\n\n  }, {\n    key: '_autoScroll',\n    value: function _autoScroll() {\n      var elapsed = Date.now() - this._autoScrollTimestamp;\n\n      var factor = DECELERATION_AMPLITUDE * Math.exp(-elapsed / DECELERATION_FACTOR);\n      var deltaX = factor * this._velocityX;\n      var deltaY = factor * this._velocityY;\n\n      if (Math.abs(deltaX) <= 5 || !this._handleScrollX(deltaX, deltaY)) {\n        deltaX = 0;\n      }\n\n      if (Math.abs(deltaY) <= 5 || !this._handleScrollY(deltaY, deltaX)) {\n        deltaY = 0;\n      }\n\n      if (deltaX !== 0 || deltaY !== 0) {\n        this._onTouchScrollCallback(deltaX, deltaY);\n\n        (0, _requestAnimationFramePolyfill2.default)(this._autoScroll);\n      }\n    }\n  }]);\n\n  return ReactTouchHandler;\n}();\n\nmodule.exports = ReactTouchHandler;","map":null,"metadata":{},"sourceType":"script"}