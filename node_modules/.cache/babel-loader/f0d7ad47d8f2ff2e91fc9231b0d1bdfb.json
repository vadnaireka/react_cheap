{"ast":null,"code":"'use strict';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _createReactClass = require('create-react-class');\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _FixedDataTableRowBuffer = require('./FixedDataTableRowBuffer');\n\nvar _FixedDataTableRowBuffer2 = _interopRequireDefault(_FixedDataTableRowBuffer);\n\nvar _FixedDataTableRow = require('./FixedDataTableRow');\n\nvar _FixedDataTableRow2 = _interopRequireDefault(_FixedDataTableRow);\n\nvar _cx = require('./cx');\n\nvar _cx2 = _interopRequireDefault(_cx);\n\nvar _emptyFunction = require('./emptyFunction');\n\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\n\nvar _joinClasses = require('./joinClasses');\n\nvar _joinClasses2 = _interopRequireDefault(_joinClasses);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableBufferedRows\n * @typechecks\n */\n\n\nvar FixedDataTableBufferedRows = (0, _createReactClass2.default)({\n  displayName: 'FixedDataTableBufferedRows',\n  propTypes: {\n    ariaIndexOffset: _propTypes2.default.number,\n    bufferRowCount: _propTypes2.default.number,\n    isScrolling: _propTypes2.default.bool,\n    defaultRowHeight: _propTypes2.default.number.isRequired,\n    firstRowIndex: _propTypes2.default.number.isRequired,\n    firstRowOffset: _propTypes2.default.number.isRequired,\n    fixedColumns: _propTypes2.default.array.isRequired,\n    fixedRightColumns: _propTypes2.default.array.isRequired,\n    height: _propTypes2.default.number.isRequired,\n    offsetTop: _propTypes2.default.number.isRequired,\n    onRowClick: _propTypes2.default.func,\n    onRowDoubleClick: _propTypes2.default.func,\n    onRowContextMenu: _propTypes2.default.func,\n    onRowMouseDown: _propTypes2.default.func,\n    onRowMouseUp: _propTypes2.default.func,\n    onRowMouseEnter: _propTypes2.default.func,\n    onRowMouseLeave: _propTypes2.default.func,\n    onRowTouchStart: _propTypes2.default.func,\n    onRowTouchEnd: _propTypes2.default.func,\n    onRowTouchMove: _propTypes2.default.func,\n    rowClassNameGetter: _propTypes2.default.func,\n    rowsCount: _propTypes2.default.number.isRequired,\n    rowHeightGetter: _propTypes2.default.func,\n    subRowHeight: _propTypes2.default.number,\n    subRowHeightGetter: _propTypes2.default.func,\n    rowExpanded: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),\n    rowKeyGetter: _propTypes2.default.func,\n    rowPositionGetter: _propTypes2.default.func.isRequired,\n    scrollLeft: _propTypes2.default.number.isRequired,\n    scrollableColumns: _propTypes2.default.array.isRequired,\n    showLastRowBorder: _propTypes2.default.bool,\n    width: _propTypes2.default.number.isRequired\n  },\n  getInitialState: function getInitialState()\n  /*object*/\n  {\n    this._rowBuffer = new _FixedDataTableRowBuffer2.default(this.props.rowsCount, this.props.defaultRowHeight, this.props.height, this._getRowHeight, this.props.bufferRowCount);\n    return {\n      rowsToRender: this._rowBuffer.getRows(this.props.firstRowIndex, this.props.firstRowOffset)\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    this._staticRowArray = [];\n    this._initialRender = true;\n  },\n  componentDidMount: function componentDidMount() {\n    setTimeout(this._updateBuffer, 1000);\n    this._initialRender = false;\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(\n  /*object*/\n  nextProps) {\n    if (nextProps.rowsCount !== this.props.rowsCount || nextProps.defaultRowHeight !== this.props.defaultRowHeight || nextProps.height !== this.props.height) {\n      this._rowBuffer = new _FixedDataTableRowBuffer2.default(nextProps.rowsCount, nextProps.defaultRowHeight, nextProps.height, this._getRowHeight, this.props.bufferRowCount);\n    }\n\n    if (this.props.isScrolling && !nextProps.isScrolling) {\n      this._updateBuffer();\n    } else {\n      this.setState({\n        rowsToRender: this._rowBuffer.getRows(nextProps.firstRowIndex, nextProps.firstRowOffset)\n      });\n    }\n  },\n  _updateBuffer: function _updateBuffer() {\n    if (this._rowBuffer) {\n      this.setState({\n        rowsToRender: this._rowBuffer.getRowsWithUpdatedBuffer()\n      });\n    }\n  },\n  shouldComponentUpdate: function shouldComponentUpdate()\n  /*boolean*/\n  {\n    // Don't add PureRenderMixin to this component please.\n    return true;\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this._rowBuffer = null;\n    this._staticRowArray.length = 0;\n  },\n  render: function render()\n  /*object*/\n  {\n    var props = this.props;\n    var rowClassNameGetter = props.rowClassNameGetter || _emptyFunction2.default;\n    var rowPositionGetter = props.rowPositionGetter;\n    var rowsToRender = this.state.rowsToRender; //Sort the rows, we slice first to avoid changing original\n\n    var sortedRowsToRender = rowsToRender.slice().sort(function (a, b) {\n      return a - b;\n    });\n    var rowPositions = {}; //Row position calculation requires that rows are calculated in order\n\n    sortedRowsToRender.forEach(function (rowIndex) {\n      rowPositions[rowIndex] = rowPositionGetter(rowIndex);\n    });\n    this._staticRowArray.length = rowsToRender.length;\n    var baseOffsetTop = props.firstRowOffset - props.rowPositionGetter(props.firstRowIndex) + props.offsetTop;\n\n    for (var i = 0; i < rowsToRender.length; ++i) {\n      var rowIndex = rowsToRender[i];\n\n      var currentRowHeight = this._getRowHeight(rowIndex);\n\n      var currentSubRowHeight = this._getSubRowHeight(rowIndex);\n\n      var rowOffsetTop = baseOffsetTop + rowPositions[rowIndex];\n      var rowKey = props.rowKeyGetter ? props.rowKeyGetter(rowIndex) : i;\n      var hasBottomBorder = rowIndex === props.rowsCount - 1 && props.showLastRowBorder;\n      this._staticRowArray[i] = _react2.default.createElement(_FixedDataTableRow2.default, {\n        key: rowKey,\n        isScrolling: props.isScrolling,\n        index: rowIndex,\n        ariaIndex: rowIndex + props.ariaIndexOffset,\n        width: props.width,\n        height: currentRowHeight,\n        subRowHeight: currentSubRowHeight,\n        rowExpanded: props.rowExpanded,\n        scrollLeft: Math.round(props.scrollLeft),\n        offsetTop: Math.round(rowOffsetTop),\n        fixedColumns: props.fixedColumns,\n        fixedRightColumns: props.fixedRightColumns,\n        scrollableColumns: props.scrollableColumns,\n        onClick: props.onRowClick,\n        onDoubleClick: props.onRowDoubleClick,\n        onContextMenu: props.onRowContextMenu,\n        onMouseDown: props.onRowMouseDown,\n        onMouseUp: props.onRowMouseUp,\n        onMouseEnter: props.onRowMouseEnter,\n        onMouseLeave: props.onRowMouseLeave,\n        onTouchStart: props.onRowTouchStart,\n        onTouchEnd: props.onRowTouchEnd,\n        onTouchMove: props.onRowTouchMove,\n        showScrollbarY: props.showScrollbarY,\n        className: (0, _joinClasses2.default)(rowClassNameGetter(rowIndex), (0, _cx2.default)('public/fixedDataTable/bodyRow'), (0, _cx2.default)({\n          'fixedDataTableLayout/hasBottomBorder': hasBottomBorder,\n          'public/fixedDataTable/hasBottomBorder': hasBottomBorder\n        }))\n      });\n    }\n\n    return _react2.default.createElement('div', null, this._staticRowArray);\n  },\n  _getRowHeight: function _getRowHeight(\n  /*number*/\n  index)\n  /*number*/\n  {\n    return this.props.rowHeightGetter ? this.props.rowHeightGetter(index) : this.props.defaultRowHeight;\n  },\n  _getSubRowHeight: function _getSubRowHeight(\n  /*number*/\n  index)\n  /*number*/\n  {\n    return this.props.subRowHeightGetter ? this.props.subRowHeightGetter(index) : this.props.subRowHeight;\n  }\n});\nmodule.exports = FixedDataTableBufferedRows;","map":null,"metadata":{},"sourceType":"script"}