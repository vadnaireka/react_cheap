{"ast":null,"code":"/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableHelper\n * @typechecks\n */\n'use strict';\n\nvar _Locale = require('./Locale');\n\nvar _Locale2 = _interopRequireDefault(_Locale);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _FixedDataTableColumnGroup = require('./FixedDataTableColumnGroup');\n\nvar _FixedDataTableColumnGroup2 = _interopRequireDefault(_FixedDataTableColumnGroup);\n\nvar _FixedDataTableColumn = require('./FixedDataTableColumn');\n\nvar _FixedDataTableColumn2 = _interopRequireDefault(_FixedDataTableColumn);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar DIR_SIGN = _Locale2.default.isRTL() ? -1 : +1; // A cell up to 5px outside of the visible area will still be considered visible\n\nvar CELL_VISIBILITY_TOLERANCE = 5; // used for flyouts\n\nfunction renderToString(value)\n/*string*/\n{\n  if (value === null || value === undefined) {\n    return '';\n  } else {\n    return String(value);\n  }\n}\n/**\n * Helper method to execute a callback against all columns given the children\n * of a table.\n * @param {?object|array} children\n *    Children of a table.\n * @param {function} callback\n *    Function to excecute for each column. It is passed the column.\n */\n\n\nfunction forEachColumn(children, callback) {\n  _react2.default.Children.forEach(children, function (child) {\n    if (child.type === _FixedDataTableColumnGroup2.default) {\n      forEachColumn(child.props.children, callback);\n    } else if (child.type === _FixedDataTableColumn2.default) {\n      callback(child);\n    }\n  });\n}\n/**\n * Helper method to map columns to new columns. This takes into account column\n * groups and will generate a new column group if its columns change.\n * @param {?object|array} children\n *    Children of a table.\n * @param {function} callback\n *    Function to excecute for each column. It is passed the column and should\n *    return a result column.\n */\n\n\nfunction mapColumns(children, callback) {\n  var newChildren = [];\n\n  _react2.default.Children.forEach(children, function (originalChild) {\n    var newChild = originalChild; // The child is either a column group or a column. If it is a column group\n    // we need to iterate over its columns and then potentially generate a\n    // new column group\n\n    if (originalChild.type === _FixedDataTableColumnGroup2.default) {\n      var haveColumnsChanged = false;\n      var newColumns = [];\n      forEachColumn(originalChild.props.children, function (originalcolumn) {\n        var newColumn = callback(originalcolumn);\n\n        if (newColumn !== originalcolumn) {\n          haveColumnsChanged = true;\n        }\n\n        newColumns.push(newColumn);\n      }); // If the column groups columns have changed clone the group and supply\n      // new children\n\n      if (haveColumnsChanged) {\n        newChild = _react2.default.cloneElement(originalChild, {\n          children: newColumns\n        });\n      }\n    } else if (originalChild.type === _FixedDataTableColumn2.default) {\n      newChild = callback(originalChild);\n    }\n\n    newChildren.push(newChild);\n  });\n\n  return newChildren;\n}\n\nvar FixedDataTableHelper = {\n  DIR_SIGN: DIR_SIGN,\n  CELL_VISIBILITY_TOLERANCE: CELL_VISIBILITY_TOLERANCE,\n  renderToString: renderToString,\n  forEachColumn: forEachColumn,\n  mapColumns: mapColumns\n};\nmodule.exports = FixedDataTableHelper;","map":null,"metadata":{},"sourceType":"script"}